${inputFile:Chapters/navigation.pillar}$

!Extracting the Structure
@sec:structure

In the previous chapters we created a parser to extract javascript from HTML source.
But our parser is rather simple. 
It sees an input as a list of javascripts.
In this part we extend the parser and we extract the HTML structure. 
Again, we use bounded seas to ease our task.
Bounded seas become handy when skipping a text in html elements and when recoverring from unclosed or malformed elements.

%analyzed the anatomy of bounded seas%.
%We described how they can be used to:
%# ''extract islands'' - parts of our interest while skipping the rest as a water (javascript seas in document), and 
%# ''skip unineteresting input'' by implementing a starLazy operator that skips any input until anything that interests us appears (e.g. ==(jsString / any) starLazy== in ==jsContent==). 



!!Matching Open And Close Tags

Elements of HTML has an interesting property: the name of an opening tag has to match the name of a closing tag. 
Though natural for humans, this is, surprisingly, rather difficult task from the parsing theory point of view.

Unfortunately, standard solutions do not fit well into the PetitParser. 
We describe problem in more details in the supplementary *Matching Tags>../matchingTags.pillar* chapter.

PetitParser2 comes with a special syntax to express constrains of matching open and close tags.
It can store a result of a rule (e.g. in the rule opening an html tag) onto a stack using the push operator and assert that the result of a rule (e.g. in the rule closing an html tag) matches the top of the stack using the match operator and finally pop the result using the pop operator (after an html tag is sucessfully recognized). 

Here is the concrete example:
First we define an element name as a repetition of letters and digits:

[[[eval=true
| t |
t := PP2Tutorial new.
t printAsCode: (t sourceFor: #elementName in: WebGrammar) stream: stream.
]]]

Than we define element as a sequence of ==elOpen==, ==elContent== and ==elClose==:

%[[[eval=true
%| t |
%t := PP2Tutorial new.
%t printAsCode: (t sourceFor: #element in: WebGrammar) stream: stream.
%]]]

[[[
WebGrammar>>element
	^ (elOpen, elContent, elClose)
]]]

In ==elOpen==, we push the element name as well as we consume water in case an element contains arguments:

[[[eval=true
| t |
t := PP2Tutorial new.
t printAsCode: (t sourceFor: #elOpen in: WebGrammar) stream: stream.
]]]

In ==elClose==, we first match the element name against the top of a stack and we pop the stack in case of success:

[[[eval=true
| t |
t := PP2Tutorial new.
t printAsCode: (t sourceFor: #elClose in: WebGrammar) stream: stream.
]]]

!!Element Content
Now we need to define ==elContent== rule, which represents the content of an element. 
==elContent== is zero or more repetitions of the following components in the given order: 
# a javascript code, 
# another element or 
# an unknown text. 
We add javascript to the first position because it is ''kind of'' an element and therefore must be ordered first to take precedence. 
The same goes for an element, it is also ''kind of'' a text. 

[[[eval=true
| t |
t := PP2Tutorial new.
stream 
	nextPutAll: '[[[';
	lf;
	nextPutAll: (t sourceFor: #elContent in: WebGrammar);
	lf;
	nextPutAll: ']]]'
]]]


Text can be anything.
Therefore, we define it as with the help of bounded seas:

[[[
WebGrammar>>text
	^ #any starLazy
]]]


!!!Epsilon in Repetitions
Note, we mark text as ==nonEpsilon==.
==nonEpsilon== operator is an extension of PEGs that allows only for non-empty parses. 
The reason for this is that ==#any asPParser starLazy== can consume anything, even the empty string. 
The star repetition of ==elContent== would end up in an infinite loop recognizing an epsilon in each of its iterations, never failing, never stopping.

!!Testing the Code
We have defined a lots of code. Let us try, if it works. 
We start with ==text==:


[[[eval=true
| t |
t := PP2Tutorial new.
t printAsCode: (t sourceFor: #testText in: WebGrammarTest) stream: stream.
]]]


And ==element== follows:

[[[eval=true
| t |
t := PP2Tutorial new.
stream 
	nextPutAll: '[[['; lf;
	nextPutAll: (t sourceFor: #testElementEmpty in: WebGrammarTest); lf;
	nextPutAll: (t testResultFor: #testElementEmpty in: WebGrammarTest); lf;
	lf;
	nextPutAll: (t sourceFor: #testElement in: WebGrammarTest); lf;
	nextPutAll: (t testResultFor: #testElement in: WebGrammarTest); lf;
	lf;
	nextPutAll: (t sourceFor: #testElementNested in: WebGrammarTest); lf;
	nextPutAll: (t testResultFor: #testElementNested  in: WebGrammarTest); lf;
	nextPutAll: ']]]'
]]]

We should be able to parse malformed elements as well. 
Lets see if the ==push==, ==match==, ==pop== magic works, as expected:

[[[eval=true
| t |
t := PP2Tutorial new.
stream 
	nextPutAll: '[[['; lf;
	nextPutAll: (t sourceFor: #testElementMalformedWrongClose in: WebGrammarTest); lf;
	nextPutAll: (t testResultFor: #testElementMalformedWrongClose in: WebGrammarTest); lf;
	lf;
	nextPutAll: (t sourceFor: #testElementMalformedExtraClose in: WebGrammarTest); lf;
	nextPutAll: (t testResultFor: #testElementMalformedExtraClose in: WebGrammarTest); lf;
	lf;
	nextPutAll: (t sourceFor: #testElementMalformedUnclosed in: WebGrammarTest); lf;
	nextPutAll: (t testResultFor: #testElementMalformedUnclosed in: WebGrammarTest); lf;
	nextPutAll: ']]]'
]]]

!!Conclusion

So far it looks good. 
But our tests are telling us only that element can parse the given input, it does not tell us how it parses the input. 
We should assert that the proper element names and the right content is extracted. 


It is the time to return a more convenient representation of the input: ''an abstract syntax tree''.
We will do this in the *following chapter>AST.pillar*.
