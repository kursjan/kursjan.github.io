${inputFile:Chapters/navigation.pillar}$

!Extracting Javascript
@sec:scripting

In this chapter we extract javascript from html files.
The solution provided in this chapter is a simple script.
We create the real parser *later>chapter2.pillar*.

!!!Installation
The easiest way to start this tutorial is to use *Moose>http://moosetechnology.org*. 
Moose is a software and data analysis platform that has everything we need already installed.

Alternatively, you can download clean *Pharo 6>http://pharo.org* (or higher) image and install PetitParser2 using the following command:

[[[
Metacello new
	baseline: 'PetitParser2';
	repository: 'github://kursjan/petitparser2';
   	load
]]]

!!!Hands On
Open your playground and let's start coding. 
First of all, we define what we want to parse:

[[[
source := PP2Sources current htmlSample.
]]]

The source is based on the HMTL of *Wikipedia>wikipedia.org* and contains the following text:
[[[eval=true
stream 
	nextPutAll: '[[[language=xml';
	lf;
	nextPutAll: PP2Sources current htmlSample;
	lf;
	nextPutAll: ']]]'.
]]]

Second, we define javascript as a ==js== rule:

[[[
js := '<script>' asPParser, #any asPParser starLazy flatten, '</script>' asPParser 
	==> #second.
]]]

The ==starLazy== operator is a new feature of PetitParser2 and it is build on top of bounded seas. 
It repetitively invokes the given given parser (any character in this case) until a string recognized by the following parser appears. 
What makes it convenient is that you don’t need to specify what is the following parser, it is inferred automatically based on the grammar specification. 
If you want to define the same rule in PetitParser, it would be:

[[[
#any asParser starLazy: ‘<script>’ asParser.
]]]

In order to extract the javascript itself and throw away the begin and end tags, we use 

[[[
==> #second
]]]

Let us try if the javascript rule can parse our ==source==:

[[[
js parse: source.
]]]

The result is failure. 
If we inspect the failure object and switch to ''Debug View'' we notice that ''<script>'' is expected at the beginning of a file, yet our input starts with ''<!DOCTYPE html>''. 
The fix to this is simple: we create a new rule ==jsSea== as a javascript island in a sea of an uninteresting water:

[[[
jsSea := js sea.
jsSea parse: source.
]]]

Good, the result is not failure! 
But it is not exactly what we want neither. 
Sea returns an array of three elements: 
# before-water 
# island and 
# after-water
Island is the result of the javascript rule, before and after water contain the rest of an input. We are interested only in the the javascript, so we redefine the document rule as follows:

[[[
jsSea := js sea ==> #second.
jsSea parse: source.
]]]

Looks better, but we are missing some results! 
This is because we never specified that there could be multiple occurrences of ==jsSea==. 
Therefore the sea rule finds only one --- the first one. 
We can easily add more ==jsSea== rules by defining a ==document== rule:

[[[
document := jsSea star.
]]]

The whole script looks like: 
[[[eval=true
stream 
	nextPutAll: '[[[';
	lf;
	nextPutAll: (PP2Tutorial new sourceForScript: #scriptWithoutString);
	lf;
	nextPutAll: ']]]'
]]]

Now by calling ==document parse: source== we extract both scripts, the result should look like: 

[[[eval=true
| tutorial |
tutorial := PP2Tutorial new.
stream 
	nextPutAll: '[[[language=javascript';
	lf;
	nextPutAll: (tutorial scriptWithoutString parse: tutorial source) first;
	lf;
	nextPutAll: (tutorial scriptWithoutString parse: tutorial source) second;
	lf;
	nextPutAll: ']]]'
]]]

Yet, there is something fishy about the second result. 
The second javascript is has ended prematurely! 
It is because the javascript rule as we defined it does not know about strings. 
Therefore, the javascript rule thinks that there is a closing of the script tag even though it is a part of the alert message string. 
We fix it by defining javascript strings and redefining the ==js== rule:

[[[eval=true
stream 
	nextPutAll: '[[[';
	lf;
	nextPutAll: (PP2Tutorial new sourceForScript: #script);
	lf;
	nextPutAll: ']]]'
]]]

The result looks better now:

[[[eval=true
| tutorial |
tutorial := PP2Tutorial new.
stream 
	nextPutAll: '[[[language=javascript';
	lf;
	nextPutAll: (tutorial script parse: tutorial source) first;
	lf;
	nextPutAll: (tutorial script parse: tutorial source) second;
	lf;
	nextPutAll: ']]]'
]]]

Great, everything works as expected!

!!!StarLazy 
In this section, we shortly inspect how does the ==startLazy== operator works. 
The code  parser ==starLazy== is a shorthand for the following:

[[[
^ (#epsilon asPParser sea)
	waterToken: parser;
	yourself
]]]

The island of the sea is ==#epsilon==. 
Such an island will always be found, because it accepts an empty string. 
Furthermore it will be surrounded by water that consumes anything until the next parser succeeds. 
You specify contents of a water by setting the ==waterToken==. 
By default you can use ==#any asPParser==. 
This means that the sea moves character by character betwen tests when to stop. 

Yet as we have seen in the case of the ==javascript== rule, invoking ==#any asPParser== may not be sufficient, the water can get confused by an end tag hidden in a string. 
Therefore, bounded seas allow you to define tokens that are expected in water. 
Such token can be a string or a comment and thus does not confuse the parser. 
In our case the tokens are either ==jsString== or any character:

[[[
^ (#epsilon asPParser sea)
	waterToken: jsString / #any asPParser;
	flatten
]]]

We have missed one detail.
The actual implementation of ==starLazy== actually extracts only before water:
[[[eval=true
| tutorial |
tutorial := PP2Tutorial new.
stream 
	nextPutAll: '[[[';
	lf;
	nextPutAll: (tutorial sourceFor: #starLazy in: PP2Node);
	lf;
	nextPutAll: ']]]'
]]]

If your island is parse an empty string (e.g. island is optional, zero or more repetitions or simply epsilon), seas postpone the epsilon parse as far as possible, until the boundary is found.
Therefore, in case of ==starLazy==, all the consumed input is in the before water and after water is empty.
