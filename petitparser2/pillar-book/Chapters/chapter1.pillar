${inputFile:Chapters/navigation.pillar}$

!Extracting Javascript
@sec:scripting

In this chapter we extract javascript from html files.
The solution provided in this chapter is a simple script.
We create the real parser *later>chapter2.pillar*.

!!!Installation
The easiest way to start this tutorial is to use *Moose>http://moosetechnology.org*. 
Moose is a software and data analysis platform that has everything we need already installed.

Alternatively, you can download clean *Pharo 6>http://pharo.org* (or higher) image and install PetitParser2 using the following command:

[[[
Metacello new
	baseline: 'PetitParser2';
	repository: 'github://kursjan/petitparser2';
   	load
]]]

In case nothing of the previous works, please *contact me>kurs.jan@gmail.com* or use the following archive, wich contains Pharo images with loaded PetitParser and virutal machines for Linux, Mac and Windows to run the image.

@@todo create a loaded image.

!!!Hands On
Open your playground and let's start coding. 
First of all, we define what we want to parse:

[[[
source := PP2Sources current htmlSample.
]]]

The source very simplified version of *Wikipedia>wikipedia.org* and contains the following text:
[[[eval=true
stream 
	nextPutAll: '[[[language=xml';
	lf;
	nextPutAll: PP2Sources current htmlSample;
	lf;
	nextPutAll: ']]]'.
]]]

Second, we define javascript as a ==js== rule:

[[[
js := '<script>' asPParser, #any asPParser starLazy flatten, '</script>' asPParser 
	==> #second.
]]]

The ==starLazy== operator is a new feature of PetitParser2.${footnote: It is build on top of bounded seas, but we will talk about this in more detail later.}$
It repetitively invokes the given parser (any character in this case) until a string recognized by the following parser appears. 
What makes ==starLazy== useful is that you donâ€™t need to specify what is the following parser, it is inferred automatically based on the grammar specification. 
Of course, with any change in the grammar, the ==starLazy== updates itself.
If you want to define the same rule in PetitParser, it would be:

[[[
#any asParser starLazy: '<script>' asParser.
]]]

In order to extract the javascript itself and throw away the begin and end tags, we use 

[[[
==> #second
]]]

Let us try if the javascript rule can parse our ==source==:

[[[
js parse: source.
]]]

The result is failure. 
If we inspect the failure object and switch to ''Debug View'' we notice that ''<script>'' is expected at the beginning of a file, yet our input starts with ''<!DOCTYPE html>''. 
The fix to this is simple: we create a new rule ==jsSea== as a javascript island in a sea of an uninteresting water:

[[[
jsSea := js sea.
jsSea parse: source.
]]]

Good, the result is not failure! 
But it is not exactly what we want neither. 
Sea returns an array of three elements: 
# before-water 
# island and 
# after-water
Island is the result of the javascript rule, before and after water contain the rest of an input. We are interested only in the the javascript, so we redefine the document rule as follows:


[[[
jsSea := js sea ==> #second.
jsSea parse: source.
]]]

Looks better, but we are missing some results! 
This is because we never specified that there could be multiple occurrences of ==jsSea==. 
Therefore the sea rule finds only one --- the first one. 
We can easily add more ==jsSea== rules by defining a ==document== rule:

[[[
document := jsSea star.
]]]

The whole script looks like: 
[[[eval=true
stream 
	nextPutAll: '[[[';
	lf;
	nextPutAll: (PP2Tutorial new sourceForScript: #scriptWithoutString);
	lf;
	nextPutAll: ']]]'
]]]

Now by calling ==document parse: source== we extract both javascripts from the source, the result should look like: 

[[[eval=true
| tutorial |
tutorial := PP2Tutorial new.
stream 
	nextPutAll: '[[[language=javascript';
	lf;
	nextPutAll: (tutorial scriptWithoutString parse: tutorial source) first;
	lf;
	lf;
	nextPutAll: (tutorial scriptWithoutString parse: tutorial source) second;
	lf;
	nextPutAll: ']]]'
]]]

Yet, there is something fishy about the second result. 
The second javascript ended prematurely!
It should look like this:
[[[eval=true
| tutorial |
tutorial := PP2Tutorial new.
stream 
	nextPutAll: '[[[language=javascript';
	lf;
	nextPutAll: (tutorial script parse: tutorial source) second;
	lf;
	nextPutAll: ']]]'
]]]

It is prematurely ended, because the javascript rule as we defined it does not know about strings. 
Therefore, the javascript rule thinks that there is a closing of the script tag even though it is a part of the alert message string. 
We fix it by defining javascript strings and redefining the ==js== rule:

@@todo fix the source, ==any== is not reused

[[[eval=true
stream 
	nextPutAll: '[[[';
	lf;
	nextPutAll: (PP2Tutorial new sourceForScript: #script);
	lf;
	nextPutAll: ']]]'
]]]

The result looks better now:

[[[eval=true
| tutorial |
tutorial := PP2Tutorial new.
stream 
	nextPutAll: '[[[language=javascript';
	lf;
	nextPutAll: (tutorial script parse: tutorial source) first;
	lf;
	lf;
	nextPutAll: (tutorial script parse: tutorial source) second;
	lf;
	nextPutAll: ']]]'
]]]

Great, everything works as expected!

!Conclusion
In this part, we have quickly prototyped a parser to extract javascript from html files.

Contrary to the first version of PetitParser, we could utilize bounded seas and ==starLazy== operator that simplify our task by skipping over uninteresting input.

@@todo conclusion

${inputFile:Chapters/toc.pillar}$
