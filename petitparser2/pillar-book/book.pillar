%!Parsing with PetitParser2

In this series we describe *PetitParser2>https://github.com/kursjan/petitparser2* \-\-\- a modular and flexible high-performance top-down parsing framework.

@@note Please note the text is not yet complete. See the *changelog>@changelog*.


!!Structure

The text is organized into two parts, the first part covers basic developer's workflow with PetitParser and is suitable for anyone who has elementary experience with PetitParser and would like to learn more about PetitParser.
The second part covers advanced topics and is for those who already use PetitParser and who would like to customize PetitParser to better fit their needs.

!!!Prerequsities
This text expects a basic knowledge of parsing with PetitParser.
If you are not sure, if you have the required level of knoledge, we recommend the *Writing Parser with PetitParser>https://www.lukas-renggli.ch/blog/petitparser-1* from Lukas Renggli and *Introduction to PetitParser2>http://www.humane-assessment.com/blog/introducing-petitparser2/* by Tudor Girba.
Optionally, there is a dedicated *PetitParser chapter>http://scg.unibe.ch/archive/papers/Kurs13a-PetitParser.pdf* in the *Deep into Pharo>http://www.deepintopharo.com/* book.

 

!!!Part I, Developer's Workflow
In the first part, basics, we demonstrate how to quickly build a high-performance parser on the concrete example of extracting a Javascript code from any HTML source (including malformed ones).

We start by prototyping in a playground and throughout several steps we reach a full-fledged and tested parser that effectively builds a structured representation of the parsed source. 
During the tutorial, we will cover many topics, some of them are well-known in the area of parsing. 
Nevertheless, the following ones are unique to PetitParser:
# We utilize bounded seas \-\-\- a technology that allows a programmer to focus on the interesting parts of an input (i.e. Javascript code in our case) and ignore the rest (i.e. the remaining HTML code).
# We utilize context-sensitive rules that will allow us to properly (and formally!) detect matching begin and end HTML tags and recover from malformed inputs.
# Last but not least, we use optimizations capabilities of PetitParser to turn our prototype into a an efficient top-down parser. 

In *Extracting Javascript>Chapters/chapter1.pillar* we start with a simple script.
Later in *From a Script to a Parser>Chapters/chapter2.pillar*, we turn the script into a proper grammar and add tests.
In *Extracting the Structure>Chapters/chapter3.pillar* we extend the parser with rules to recognize HTML structure, even if the HTML source is malformed. In *Abstract Syntax Tree>Chapters/AST.pillar*, we show how to build a suitable representation of the HTML source.

In *Optimizations>Chapters/optimizations.pillar* we inspect optimizations capabilities of PetitParser2
and in *Memoizations>Chapters/memoization.pillar* we describe tooling of PetitParser2 that will help us to pinpoint the performance bottlenecks and we show techniques how to fix them.


!!!Part II, Advanced Topics
@@note under construction
In the second part we describe advanced topics or get into the details of the topics we mentioned in the first part.
For example, we provide more details to context-sensitive parsing, optimizations with caches and specializations, we show how to parse streams or how to efficiently highlight text.${footnote: useful especially for text editors}$

On a concrete example of a Smalltalk grammar, we describe how to develop a parser whose performance is comparable to a table-driven parsers such as *SmaCC>https://github.com/ThierryGoubier/SmaCC* or hand-written parsers such as RBParser.${footnote: parser used in Pharo compiler}$

@@todo add some graphs?

- *Matching Tags>../matchingTags.pillar*
- *Caches in Detail>../caches.pillar*

@@todo create a chapter about syntax highlighting

@@todo create a chapter about specializations 
- *Specializations in Detail>../smalltalkOptimization.pillar*

!!Get Started
Lets get started with one of the chapters:
- *Extracting Javascript>Chapters/chapter1.pillar*.
- *From a Script to a Parser>Chapters/chapter2.pillar*.
- *Extracting the Structure>Chapters/chapter3.pillar*.
- *Abstract Syntax Tree>Chapters/AST.pillar*.
- *Optimizations>Chapters/optimization.pillar*.
- *Memoization>Chapters/memoization.pillar*.

Interested in some details?
- *The ==starLazy== operator>Chapters/starLazy.pillar*
- *Matching Tags>Chapters>matchingTags.pillar* (context-sensitive parsing)
- *Specializations in Detail>specializations.pillar*
- *Caches in Detail>caches.pillar*

!!Changelog
@changelog

''2017-01-19'' - First draft of he Part I

!!License
The text is released under the *MIT license>LICENSE.pillar*.

