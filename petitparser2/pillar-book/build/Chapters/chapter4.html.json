{"content":"<section>\n<h1>Optimizations</h1>\n\n<p>\nWhen running the <code>testStructuredDocument</code>, you might have noticed that the performance is not good. \nIt is actually terribly bad. Let us inspect in in detail:\n</p>\n<figure><pre><code class=\"smalltalk\">WebParser new debug: input.</code></pre><figcaption></figcaption></figure>\n\n<p>\nThis will run the parser in a debug mode, which collects lots of useful information. Unfortunately, it also takes considerable amount of time so be patient. Once you get the result, inspect the Report tab (note that numbers might slightly differ in your case):\n</p>\n\n<p>\n\n<figure>\n\t<img src=\"figures/unoptimized-report.png\" width=\"100%%\"/>\n\t<figcaption></figcaption>\n</figure>\n</p>\n<p>\nThe total stream size is 1171 characters. \nThe parser has remembered the full context 510197 times and restored 387667 times. \nThis means that the full copy of the context (including the stack of opened elements) has been created 510197 times and the context has been restored from this full copy (by doing another copy) 387667 times. \nThis is in average 331 backtrackings per consumed character. \n</p>\n\n<p>\nSome of the parsers do not need to perform the full context copy. \nThese are prefixed with ‘lightweight’. \nIn the lightweight case, only the position is remembered and restored (which is much faster than the full copy of a stack). \nThis happened in average 92 times per character.\n</p>\n\n<p>\nHonestly, these numbers are brutal. \nIn ideal case, the number of full restores should be zero. \nFull remember and restore is very expensive. \nThis is very often the case, since many grammars are context-free, i.e. they do not use push and pop parsers. \nRegarding lightweight backtracking, in ideal case, the average of lightweight backtracks per character should be below 1. \nThis can happen in case of deterministic grammars, which do not do many speculations and exactly know which alternative of a choice is the correct one. \n</p>\n\n<p>\nSo why are the numbers so bad in our case? Let us inspect in more detail how this was happening, using the Debug view:\n</p>\n<p>\n\n<figure>\n\t<img src=\"figures/unoptimized-debug.png\" width=\"100%%\"/>\n\t<figcaption></figcaption>\n</figure>\n</p>\n<p>\nThe view shows us that 1502165 parsers were invoked to consume the input. \nMost of it (751559 invocations) happened when parsing first two lines of the input - the before water of the sea.\n</p>\n<p>\nThis is too much for such a short input. \nSuch a bad performance is caused by the fact that bounded seas have to verify at every position if the next parser can be parsed. \nIf the next parser happens to be another sea (as in the case of <code>WebGrammar</code>), the number of invocations grows really fast (exponentially in fact). \n</p>\n\n<p>\nWe see that the element rule took approximately one half of the invocations (750598). \nMajority of 751559 invocations of before water were spent by testing for element. \nLuckily, PetitParser2 comes with an automated optimizations that are able to reduce most of the unnecessary overhead. \nLet it give a try:\n</p>\n<figure><pre><code class=\"smalltalk\">WebParser new optimize debug: input.</code></pre><figcaption></figcaption></figure>\n\n<p>\nThe report looks much better now:\n\n<figure>\n\t<img src=\"figures/optimized-report.png\" width=\"100%%\"/>\n\t<figcaption></figcaption>\n</figure>\n</p>\n\n\n<p>\nOnly one full remember, and only 7 lightweight backtracks per character. \nThis is reasonably good for a grammar with bounded seas. \n</p>\n<p>\nBecause of the nature of bounded seas and implementation of PetitParser2, we do not recommend to parse grammars with more complicated bounded seas without optimizations.\n</p>\n<p>\nBut let us inspect some of the optimizations that happened. \nLet us try the Debug view:\n</p>\n<p>\n\n<figure>\n\t<img src=\"figures/optimized-debug.png\" width=\"100%%\"/>\n\t<figcaption></figcaption>\n</figure>\n</p>\n<p>\nWe see that total number of invoked parsers is 55144, roughly 30x less. \nWe also see that, as in the previous case, most of the parsers were invoked in the before-water of the initial sea, even though roughly 10x less. \nBut we can also notice that the following island and after water are parsed using only 2 and 4 parser invocations respectively! \n</p>\n<p>\nThis is because of caching. \nUnder the <code>element</code> rule, there is a mapping node. \nThe mapping node returns the complete HTML element just in two invocations. \nThe fact that the result has been cached is visualized via the result reference. \n</p>\n\n<p>\nThe reference indicates that at the time of that invocation the result has already been computed during some previous invocation. \nThe parser remembered it and it returned the result without invoking the parser again. \nThis is done by the <code>PP2Cache</code> strategy (you can see its profiling version in the screenshot). The cache has been added to the element during the optimization phase. \n</p>\n\n<p class=\"note\">getting too verbose here: <s>Because it is extremely annoying (trust me) to see only the cached result without the steps how the result was cached, the reference link can be expanded showing. When expanded, it shows the original parsing attempt so that we don’t need to search for it in the previous invocations. But remember, all the parser invocations under the reference node happened at some earlier point in time and are debug trace is visible for the user convenience.</s></p>\n<section>\n<h2>I. Caches</h2>\n<p>\nWe already mentioned <code>PP2Cache</code>, but PetitParser2 utilizes four different caches that can be split into two categories:\n</p>\n<ul>\n<li>First category contains fast and memory efficient caches, which remember only the last result of an underlying parser. If it happens that a parser is invoked at the same position again, the result is returned without any parsing. If the position differs, the underlying parser is invoked and the result is remembered for the new position. <s>The fast caches cannot be applied for the context-sensitive parsers, i.e. for parsers whose result depends on some other parameters than a position, e.g. the parser generated from the <code>elClose</code> rule.</s></li>\n</ul>\n\n\n<ul>\n<li>The second category contains slower and more memory intense caches, which remember every result for the given position, we call these caches memoizing caches. If it happens that a parser is invoked at any position it has been invoked before, the result is returned without any parsing. <s>Furthermore, if a parser is context-sensitive, the cache uses the whole context as a key.</s></li>\n</ul>\n\n\n<p>\nYou can inspect the performance of caches in the cache view:\n</p>\n<p>\n\n<figure>\n\t<img src=\"figures/optimized-caches.png\" width=\"100%%\"/>\n\t<figcaption></figcaption>\n</figure>\n</p>\n\n<p>\nThere are three caches visble in the cache view: (i) cache and (ii) trimming cache belong to the first category and (iii) sea memoization cache belongs to the second category. \n</p>\n<dl><dt>Cache</dt>\n<dd>Cache improves performance of choice that has alternatives with the same prefix, e.g.:</dd>\n</dl>\n<figure><pre><code class=\"smalltalk\">identifier, $: asPParser not / identifier</code></pre><figcaption></figcaption></figure>\n\n<p>\nNormally, if the identifier is not followed by $:, the parser backtracks and parses identifier again. \nOptimizations of PetitParser2 can detect such a case and enwrap the identifier with a cache, preventing superfluous invocations.\n</p>\n\n<dl><dt>Trimming Cache</dt>\n<dd>The trimming cache improves the performance of grammars using trimmed tokens, e.g.:</dd>\n</dl>\n<figure><pre><code class=\"smalltalk\">keyword token trim, identifier token trim</code></pre><figcaption></figcaption></figure>\n<p>\nBecause each token trims whitespaces before and after itself, the trimming in between tokens happens twice. \nThe trimming cache prevents this. \n</p>\n<dl><dt>Sea Memoization Cache</dt>\n<dd>The sea memoization cache is tailored to bounded seas. </dd>\n</dl>\n<p>\nIn some cases, parsing a grammar with bounded can seas result in an exponential complexity, performing lots of redundant work. \nBecause the traditional cache would not be able to reduce the exponential complexity, the seas are memoized.\nThis will preserve the linear complexity of parsing expression grammars.\n</p>\n<p>\nWe are still missing the last fourth cache. \nThat cache is a bit special and we will dedicate it a the next post.\n\n</p></section></section>","title":"PetitParser2 and Bounded Seas","Author":"Jan Kurs"}