{"content":"<a id=\"top\"></a>\n<p>\nThis text is part of the <a href=\"Chapters/../../book.html\">Parsing With PetitParser2</a> series.\nThe <a href=\"#toc\">table of content</a> can be found at the end of the chapter.\n\n</p>\n<section>\n<h1>Turning the script into a real parser</h1>\n<a id=\"sec:grammar\"></a>\n<p>\nIf we are happy with the prototype and we decide to extend the grammar, it is inconvenient to keep it in a playground script. \nIt is a good practice to define a proper parser, it allows us to:\n</p><ul>\n<li>manage cyclic dependencies, </li>\n<li>simplify testing and </li>\n<li>extend with new functionality. </li>\n</ul>\n\n<section>\n<h2>1. Hands On</h2>\n<p>\nWe create a parser by subclassing <code>PP2CompositeNode</code>:\n</p>\n<figure><pre><code class=\"smalltalk\">PP2CompositeNode subclass: #WebGrammar\n\tinstanceVariableNames: 'document javascript elOpen elContent elClose elementName element text jsOpen jsContent jsClose jsString structuredDocument comment any'\n\tclassVariableNames: ''\n\tpoolDictionaries: ''\n\tcategory: 'PetitParser2-Tutorial'</code></pre><figcaption></figcaption></figure>\n\n<section>\n<h3>Javascript rule</h3>\n\n<p>\nWe define a <code>javascipt</code> rule as follows:\n</p>\n<figure><pre><code class=\"smalltalk\">WebGrammar&gt;&gt;javascript\n\t^ jsOpen, jsContent, jsClose ==&gt; #second</code></pre><figcaption></figcaption></figure>\n\n<p>\nThe rules of <code>javascript</code> are defined as follows:\n</p><figure><pre><code class=\"smalltalk\">WebGrammar&gt;&gt;jsOpen\n\t^ '&lt;script&gt;' asPParser\n\nWebGrammar&gt;&gt;jsClose\n\t^ '&lt;/script&gt;' asPParser\n\nWebGrammar&gt;&gt;jsContent\n\t^ (jsString / #any asPParser) starLazy\n\nWebGrammar&gt;&gt;jsString\n\t^ $' asPParser, any starLazy, $' asPParser\nWebGrammar&gt;&gt;any\n\t^ #any asPParser</code></pre><figcaption></figcaption></figure>\n\n<p>\nFirst, we would like to cover <code>javascript</code> rule with a test to make sure the rule works as expected. \nWe do this by subclassing <code>PP2CompositeParserTest</code> and adding the test method;\n</p>\n<figure><pre><code class=\"smalltalk\">PP2CompositeNodeTest subclass: #WebGrammarTest\n\tinstanceVariableNames: ''\n\tclassVariableNames: ''\n\tpoolDictionaries: ''\n\tcategory: 'PetitParser2-Tutorial'\n\nWebGrammarTest&gt;&gt;parserClass\n\t^ WebGrammar\n\nWebGrammarTest&gt;&gt;testJavascript\n\tself parse: '&lt;script&gt;alert(&quot;hi there!&quot;)&lt;/script&gt;' rule: #javascript\t</code></pre><figcaption></figcaption></figure>\n\n</section><section>\n<h3>Document rule</h3>\n<p>\nTo extract javascript from an html document, we first define the <code>document</code> rule simply as <code>javascript</code> because we are interested only in javascript:\n</p>\n<figure><pre><code class=\"smalltalk\">WebGrammar&gt;&gt;document\n\t^ (javascript sea ==&gt; #second) star</code></pre><figcaption></figcaption></figure>\n\n<p>\nOr alternatively:\n</p><figure><pre><code class=\"smalltalk\">WebGrammar&gt;&gt;document\n\t^ javascript islandInSea star</code></pre><figcaption></figcaption></figure>\n\n<p>\nThe <code>islandInSea</code> operator is a shorthand for:\n</p><figure><pre><code class=\"smalltalk\">sea ==&gt; #second</code></pre><figcaption></figcaption></figure>\n\n<p>\nWe should not forget the <code>start</code> rule:\n</p><figure><pre><code class=\"smalltalk\">WebGrammar&gt;&gt;start\n\t^ structuredDocument </code></pre><figcaption></figcaption></figure>\n\n<p>\nAnd finally, we write a test for <code>document</code>:\n</p>\n<figure><pre><code class=\"smalltalk\">WebGrammarTest&gt;&gt;testDocument\n\t| input |\n\tinput := PP2Sources current htmlSample.\n\t\n\tself parse: input rule: #document.\n\tself assert: result size equals: 2.</code></pre><figcaption></figcaption></figure>\n\n\n</section></section><section>\n<h2>2. Complete Sources</h2>\n<p>\nYou can download the sources here:\n</p><ul>\n<li><a href=\"../WebGrammar.st\"><code>WebGrammar</code></a> </li>\n<li><a href=\"../WebGrammarTest.st\"><code>WebGrammarTest</code></a></li>\n</ul>\n\n</section><section>\n<h2>3. Conclusion</h2>\n<p>\nIn this chapter we have turned the script form the previous chapter into the class, following the practices of PetitParser.\nWe have also added some tests to verify the rules are working as expected.\nThis step allows us to add a new functionality as we will do in the next chapter. \n</p>\n\n<a id=\"toc\"></a><section>\n<h1>Table of Contents</h1>\n<p>\nThis text is part of the <a href=\"Chapters/../../book.html\">Parsing With PetitParser2</a> series.\n</p>\n<p>\nPart I, Basics:\n</p><ul>\n<li><a href=\"Chapters/../chapter1.html\">Extracting Javascript</a></li>\n<li><a href=\"Chapters/../chapter2.html\">From a Script to a Parser</a></li>\n<li><a href=\"Chapters/../chapter3.html\">Extracting the Structure</a></li>\n<li><a href=\"Chapters/../AST.html\">Abstract Syntax Tree</a></li>\n<li><a href=\"Chapters/../optimizations.html\">Optimizations</a></li>\n<li><a href=\"Chapters/../memoization.html\">Memoization</a></li>\n</ul>\n\n<p>\nPart II, Advanced Topics:\n</p><ul>\n<li><a href=\"Chapters/../starLazy.html\">The <code>starLazy</code> Operator</a></li>\n<li><a href=\"Chapters/../matchingTags.html\">Matching Tags</a></li>\n<li><a href=\"Chapters/../smalltalkOptimization.html\">Specializations in Detail</a></li>\n<li><a href=\"Chapters/../caches.html\">Caches in Detail</a></li>\n</ul>\n\n<p>\nGo to <a href=\"#top\">top</a>.\n</p></section></section></section>","title":"Parsing with PetitParser2","Author":"Jan Kurs"}