{"content":"<a id=\"top\"></a>\n<p>\nThis text is part of the <a href=\"Chapters/../../book.html\">Parsing With PetitParser2</a> series.\nThe <a href=\"#toc\">table of content</a> can be found at the end of the chapter.\n\n</p>\n<section>\n<h1>Context-Sensitive Parsing</h1>\n\n<p>\nContext-sensitive parsing is a process during which a parser has to remember some information and its result depends on its information.\nWe saw an example with the HTML open and close tags in <a href=\"Chapters/chapter3.html\">Extracting the Structure</a> chapter.\n</p>\n<p>\nThe <code>elClose</code> rule is context-sensitive, because the result of <code>elClose</code> when parsing, for example, input <em>body</em>, depends on an information remembered by <code>elOpen</code>.\nThe <code>elOpen</code> rule is also context-senstive, because it changes the information.\n</p>\n<p>\nAnother example of context-sensitive rules is indentation of Python, or body of HTML request whose length depends on the value in the header.\n</p>\n<p>\nThough natural for humans, the context-sensitive parsing is, surprisingly, rather difficult task from the parsing theory point of view.\n</p>\n\n<section>\n<h2>1. Matching Open And Close Tags</h2>\n<p>\nLet us return to our example of matching open and close tags.\nOne of the standard solutions provided by many parsing frameworks, including PetitParser, are parsing actions. \nWe define an action that asserts the name of an open tag corresponds to the name of a close tag:\n</p>\n<figure><pre><code class=\"smalltalk\">WebGrammar&gt;&gt;elOpen\n\t^ '&lt;' asPParser, identifier, '&gt;' asPParser\n\nWebGrammar&gt;&gt;elClose\n\t^ '&lt;/' asPParser, identifier, '&gt;' asPParser\n\nWebGrammar&gt;&gt;element\n\t^ elOpen, content, elClose\n\t\n\t&quot;define parsing action:&quot;\n\tmap: [:_open :_content :_close |\n\t(_open = _close) ifTrue: [\n\t\t_content\n\t] ifFalse: [ \n\t\tPP2Failure message: ‘open and close do not match’.\n\t]</code></pre><figcaption></figcaption></figure>\n\n<p>\nThis solution works well, if you want to validate if an input is valid.\nBut it will fail for invalid inputs, for example for inputs with unclosed elements:\n</p>\n<figure><pre><code class=\"smalltalk\">&lt;b&gt;&lt;i&gt;bold and italics&lt;/b&gt;</code></pre><figcaption></figcaption></figure>\n\n<p>\nThe first <code>elOpen</code> consumes <em>&lt;b&gt;</em>, \nthe second <code>elOpen</code> consumes \n<em>&lt;i&gt;</em>, \ncontent consumes <em>bold and italics</em> and \n<code>elClose</code> consumes <em>&lt;/b&gt;</em>. \nThe action checks if <em>i = b</em> and returns failure. \nThe failure will be the final result because such a code does not restore position to recover from the failure and actions do not offer a way to do so. \nOther options based on custom parsers or wrapping parsers will sooner or later run into a hard to debug issues with backtracking as well.\n</p>\n<p class=\"todo\">does this work with GLL?</p>\n<p>\nThe PetitParser2 offers more formal way of such definitions. \nIt can store a result of a rule (e.g. <code>elOpen</code>) onto a stack using the push operator and assert that the result of a rule (e.g. <code>elClose</code>) matches the top of the stack using the match operator and finally pop the result using the pop operator. \nHere is the concrete example. \n</p>\n\n<p>\nFirst we define an element name as a repetition of letters and digits:\n</p>\n<figure><pre><code class=\"smalltalk\">WebGrammar&gt;&gt;elementName\n\t^ #word asPParser plus flatten</code></pre><figcaption></figcaption></figure>\n\n<p>\nThan we define element as a sequence of <code>elOpen</code>, <code>elContent</code> and <code>elClose</code>:\n</p>\n<figure><pre><code class=\"smalltalk\">WebGrammar&gt;&gt;element\n\t^ (elOpen, elContent, elClose)</code></pre><figcaption></figcaption></figure>\n\n<p>\nIn <code>elOpen</code>, we push the element name as well as we consume water in case an element contains arguments:\n</p>\n<figure><pre><code class=\"smalltalk\">WebGrammar&gt;&gt;elOpen\n\t^ $&lt; asPParser, elementName push, #any starLazy, $&gt; asPParser ==&gt; #second</code></pre><figcaption></figcaption></figure>\n\n<p>\nIn <code>elClose</code>, we first match the element name against the top of a stack and we pop the stack in case of success:\n</p>\n<figure><pre><code class=\"smalltalk\">WebGrammar&gt;&gt;elClose\n\t^ '&lt;/' asPParser, elementName match pop, $&gt; asPParser</code></pre><figcaption></figcaption></figure>\n\n</section><section>\n<h2>2. Conclusion</h2>\n\n<a id=\"toc\"></a><section>\n<h1>Table of Contents</h1>\n<p>\nThis text is part of the <a href=\"Chapters/../../book.html\">Parsing With PetitParser2</a> series.\n</p>\n<p>\nPart I, Developer's Workflow:\n</p><ul>\n<li><a href=\"Chapters/../chapter1.html\">Extracting Javascript</a></li>\n<li><a href=\"Chapters/../chapter2.html\">From a Script to a Parser</a></li>\n<li><a href=\"Chapters/../chapter3.html\">Extracting the Structure</a></li>\n<li><a href=\"Chapters/../AST.html\">Abstract Syntax Tree</a></li>\n<li><a href=\"Chapters/../optimizations.html\">Optimizations</a></li>\n<li><a href=\"Chapters/../memoization.html\">Memoization</a></li>\n</ul>\n\n\n<p>\nDo you have ideas, suggestions or issues? Write us an <a href=\"mailto:kurs.jan@gmail.com\">email</a>, or contact u on <a href=\"Chapters/github.com/kursjan/petitparser2/issues\">github</a>!\n</p>\n<p>\nGo to <a href=\"#top\">top</a>.\n\n</p></section></section></section>","title":"Parsing with PetitParser2","Author":"Jan Kurs"}