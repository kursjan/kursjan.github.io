{"content":"<a id=\"top\"></a>\n<p>\nThis text is part of the <a href=\"Chapters/../../book.html\">Parsing With PetitParser2</a> series.\nThe <a href=\"#toc\">table of content</a> can be found at the end of the chapter.\n\n</p>\n<section>\n<h1>Extracting the Structure</h1>\n<a id=\"sec:structure\"></a>\n<p>\nIn the <a href=\"chapter2.html\">previous chapter</a> we created a parser to extract javascript from HTML source.\nYet our parser is rather simple.\nIt sees an input as a list of javascripts.\nIn this part we extend the parser and we extract the HTML structure as well, thus we will obtain a tree of html elements and javascript.\n</p>\n\n\n\n<section>\n<h2>1. Matching Open And Close Tags</h2>\n\n<p>\nElements of HTML has an interesting property: the name of an opening tag has to match the name of a closing tag. \nThough natural for humans, this is, surprisingly, rather difficult task from the parsing theory point of view.\n</p>\n<p>\nUnfortunately, standard solutions do not really work as we would like to.\nWe describe problem in more details in the supplementary <a href=\"../matchingTags.html\">Matching Tags</a> chapter.\n</p>\n<p>\nTo fix the issue, PetitParser2 comes with a special syntax to express constrains of matching open and close tags.\nIt can store a result of a rule (e.g. opening an html tag) onto a stack using the <code>push</code> operator and assert that a result of a rule (e.g. closing an html tag) matches the top of the stack using the <code>match</code> operator.\n</p>\n<p>\nHere is the concrete example:\nFirst we define an element name as a repetition of letters and digits:\n</p>\n<figure><pre><code class=\"smalltalk\">WebGrammar&gt;&gt;elementName\n\t^ #word asPParser plus flatten</code></pre><figcaption></figcaption></figure>\n\n<p>\nThan we define element as a sequence of <code>elOpen</code>, <code>elContent</code> and <code>elClose</code>:\n</p>\n\n<figure><pre><code class=\"smalltalk\">WebGrammar&gt;&gt;element\n\t^ (elOpen, elContent, elClose)</code></pre><figcaption></figcaption></figure>\n\n<p>\nIn <code>elOpen</code>, we push the element name as well as we consume water in case an element contains arguments:\n</p>\n<figure><pre><code class=\"smalltalk\">WebGrammar&gt;&gt;elOpen\n\t^ $&lt; asPParser, elementName push, any starLazy, $&gt; asPParser ==&gt; #second</code></pre><figcaption></figcaption></figure>\n\n<p>\nIn <code>elClose</code>, we first match the element name against the top of a stack and we pop the stack in case of success:\n</p>\n<figure><pre><code class=\"smalltalk\">WebGrammar&gt;&gt;elClose\n\t^ '&lt;/' asPParser, elementName match pop, $&gt; asPParser</code></pre><figcaption></figcaption></figure>\n\n</section><section>\n<h2>2. Element Content</h2>\n<p>\nNow we need to define <code>elContent</code> rule, which represents the content of an element. \n<code>elContent</code> is zero or more repetitions of the following components in the given order: \n</p><ol><li>a javascript code; </li>\n<li>another element; or </li>\n<li>an unknown text. </li>\n</ol>\n<p>\nJavascript is on the first position because it is <em>kind of</em> element<sup><a href=\"#footnote1\">[1]</a></sup>and therefore must be ordered before an element rule. \nThe same holds for the element rule, it is also <em>kind of</em> text. \n</p>\n<figure><pre><code class=\"smalltalk\">WebGrammar&gt;&gt;elContent\n\t^ (javascript / element / text nonEpsilon) star</code></pre><figcaption></figcaption></figure>\n\n\n<p>\nText can be anything.\nTherefore, we define it as with the help of bounded seas, concretely using the <code>starLazy</code> operator:\n</p>\n<figure><pre><code class=\"smalltalk\">WebGrammar&gt;&gt;text\n\t^ #any starLazy</code></pre><figcaption></figcaption></figure>\n\n\n<section>\n<h3>Epsilon in Repetitions</h3>\n<p>\nNote, we mark the <code>text</code> rule with <code>nonEpsilon</code>.\nThe <code>nonEpsilon</code> operator is an extension of PEGs that forbids epsilon parses (in other words if the underlying parser does not consume any input, it fails).\nThe reason for this is that <code>#any asPParser starLazy</code> can consume anything, even the empty string, because the <code>starLazy</code> operator allows for zero repetitions. \n</p>\n<p class=\"todo\">there might be possibility to define <code>plusLazy</code> as well.</p>\n<p>\nWithout <code>nonEpsilon</code>, the star repetition of <code>elContent</code> would end up in an infinite loop recognizing an epsilon in each of its iterations, never failing, never stopping.\nYou can easily freeze your image by running the following code (we recommend saving your image now):\n</p>\n<figure><pre><code class=\"smalltalk\">&quot;Tip: save the image before running&quot;\n#any asPParser optional star parse: 'endless loop'</code></pre><figcaption></figcaption></figure>\n\n</section></section><section>\n<h2>3. Testing the Code</h2>\n<p>\nWe have written a new code, let us try if it works. \nWe start with <code>text</code>:\n</p>\n\n<figure><pre><code class=\"smalltalk\">WebGrammarTest&gt;&gt;testText\n\tself parse: 'foobar' rule: #text\n[PASS]</code></pre><figcaption></figcaption></figure>\n\n\n<p>\nAnd <code>element</code> follows:\n</p>\n<figure><pre><code class=\"smalltalk\">WebGrammarTest&gt;&gt;testElementEmpty\n\tself parse: '&lt;foo&gt;&lt;/foo&gt;' rule: #element\n[PASS]\n\nWebGrammarTest&gt;&gt;testElement\n\tself parse: '&lt;p&gt;lorem ipsum&lt;/p&gt;' rule: #element\n[PASS]\n\nWebGrammarTest&gt;&gt;testElementNested\n\tself parse: '&lt;p&gt;lorem &lt;i&gt;ipsum&lt;/i&gt;&lt;/p&gt;' rule: #element\n[PASS]</code></pre><figcaption></figcaption></figure>\n\n<p>\nWe should be able to parse malformed elements as well. \nLets see if the <code>push</code>, <code>match</code>, <code>pop</code> magic works, as expected:\n</p>\n<figure><pre><code class=\"smalltalk\">WebGrammarTest&gt;&gt;testElementMalformedWrongClose\n\tself parse: '&lt;foo&gt;&lt;bar&gt;meh&lt;/baz&gt;&lt;/foo&gt;' rule: #element.\n[PASS]\n\nWebGrammarTest&gt;&gt;testElementMalformedExtraClose\n\tself parse: '&lt;foo&gt;&lt;bar&gt;meh&lt;/bar&gt;&lt;/fii&gt;&lt;/foo&gt;' rule: #element\n[PASS]\n\nWebGrammarTest&gt;&gt;testElementMalformedUnclosed\n\tself parse: '&lt;head&gt;&lt;meta content=&quot;mess&quot;&gt;&lt;/head&gt;' rule: #element.\n[PASS]</code></pre><figcaption></figcaption></figure>\n\n</section><section>\n<h2>4. Conclusion</h2>\n\n<p>\nSo far it looks good. \nBut our tests are telling us only that element can parse the given input, it does not tell us <em>how</em> it parses the input. \nWe should assert that the proper element names and the right content is extracted. \n</p>\n\n<p>\nIt is the time to return a more convenient representation of the input: <em>an abstract syntax tree</em>.\nWe will do this in the <a href=\"AST.html\">following chapter</a>.\n</p>\n<a id=\"toc\"></a><section>\n<h1>Table of Contents</h1>\n<p>\nThis text is part of the <a href=\"Chapters/../../book.html\">Parsing With PetitParser2</a> series.\n</p>\n<p>\nPart I, Developer's Workflow:\n</p><ul>\n<li><a href=\"Chapters/../chapter1.html\">Extracting Javascript</a></li>\n<li><a href=\"Chapters/../chapter2.html\">From a Script to a Parser</a></li>\n<li><a href=\"Chapters/../chapter3.html\">Extracting the Structure</a></li>\n<li><a href=\"Chapters/../AST.html\">Abstract Syntax Tree</a></li>\n<li><a href=\"Chapters/../optimizations.html\">Optimizations</a></li>\n<li><a href=\"Chapters/../memoization.html\">Memoization</a></li>\n</ul>\n\n\n<p>\nDo you have ideas, suggestions or issues? Write us an <a href=\"mailto:kurs.jan@gmail.com\">email</a>, or contact u on <a href=\"Chapters/github.com/kursjan/petitparser2/issues\">github</a>!\n</p>\n<p>\nGo to <a href=\"#top\">top</a>.\n\n</p></section></section></section>\n<hr></hr>\n<sup id=\"footnote1\">[1]  any javascript code can be recognized as an html element</sup><br/>\n","title":"Parsing with PetitParser2","Author":"Jan Kurs"}