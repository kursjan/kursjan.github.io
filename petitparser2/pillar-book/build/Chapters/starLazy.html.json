{"content":"<section>\n<h1>StarLazy </h1>\n\n<p class=\"todo\">say more about sea as well.</p>\n<p class=\"todo\">compare to lazy repetitions.</p>\n<p>\nIn this section, we shortly inspect how does the <code>startLazy</code> operator works. \nThe code  <code>parser starLazy</code> is a shorthand for the following:\n</p>\n<figure><pre><code class=\"smalltalk\">^ (#epsilon asPParser sea)\n\twaterToken: parser;\n\tyourself</code></pre><figcaption></figcaption></figure>\n\n<p>\nThe island of the sea is <code>#epsilon</code>. \nSuch an island will be always found, because it accepts an empty string. \nFurthermore it will be surrounded by water that consumes anything until the next parser succeeds. \nYou specify contents of a water by setting the <code>waterToken</code>. \nBy default you can use <code>#any asPParser</code>. \nThis means that the sea moves character by character betwen tests if the next parser succeeds. \n</p>\n<p>\nYet as we have seen in the case of the <code>javascript</code> rule in the <a href=\"chapter1.html\">Extracting Javascript</a> chapter, invoking <code>#any asPParser</code> may not be sufficient, the water can get confused by an end tag hidden in a string. \nTherefore, bounded seas allow you to define tokens that are expected in water. \nSuch token can be a string or a comment and thus does not confuse the parser. \nIn our case the tokens are either <code>jsString</code> or any character:\n</p>\n<figure><pre><code class=\"smalltalk\">^ (#epsilon asPParser sea)\n\twaterToken: jsString / #any asPParser;\n\tflatten</code></pre><figcaption></figcaption></figure>\n\n<p>\nWe have missed one detail.\nThe actual implementation of <code>starLazy</code> actually extracts only before water:\n</p><figure><pre><code class=\"smalltalk\">PP2Node&gt;&gt;starLazy\n\t^ ((#epsilon asPParser sea)\n\t\twaterToken: self)\n\tmap: [:_before :_epsilon :_after | \n\t\t&quot;return just before water, because island is nil and after water is empty&quot;\n\t\t_before\n\t] </code></pre><figcaption></figcaption></figure>\n\n<p>\nIf your island is parse an empty string (e.g. island is optional, zero or more repetitions or simply epsilon), seas postpone the epsilon parse as far as possible, until the boundary is found.\nTherefore, in case of <code>starLazy</code>, all the consumed input is in the before water and after water is empty.\n\n</p></section>","title":"Parsing with PetitParser2","Author":"Jan Kurs"}